1.)to find the element in the array that is present only once in the array and has no repetitions in it
 Solution{
    public:
    int firstNonRepeating(int arr[], int n) 
    { 
        // Complete the function
        unordered_map<int,int>umap;
        for(int i=0;i<n;i++)
        {
            umap[arr[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            int key=arr[i];
            auto temp=umap.find(key);
            if(temp->second == 1 )
            return key;
        }
        
    } 
  
};
**********************************************************************************************************************************************************************
2.)to reutrn the position which is smallest and which is repeated more than once in the array
 Solution {
  public:
    // Function to return the position of the first repeating element.
    int firstRepeated(int arr[], int n) {
        // code here
        unordered_map<int,int>umap;
        for(int i=0;i<n;i++)
        {
            umap[arr[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            int key=arr[i];
            auto temp=umap.find(key);
            if(temp->second != 1)
            {
                return i+1;
            }
            
        }
        return -1;
    }
};
*******************************************************************************************************************************************************************0
3.)to find the intersection of two arrays and return the number of repetitons of the element in the arrays
class Solution {
  public:
    // Function to return the count of the number of elements in
    // the intersection of two arrays.
    int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Your code goes 
        unordered_set<int>s;
        
        for(int i=0;i<n;i++)
        {
            s.insert(a[i]);
        }
        int count=0;
        for(int i=0;i<m;i++)
        {
             int key=b[i];
             if(s.find(key) != s.end())
             {
                 count++;
                 s.erase(key);
             }
        }
        return count++;
    }
};
*******************************************************************************************************************************************************************
4.)
