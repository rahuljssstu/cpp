1.)to find the element in the array that is present only once in the array and has no repetitions in it
 Solution{
    public:
    int firstNonRepeating(int arr[], int n) 
    { 
        // Complete the function
        unordered_map<int,int>umap;
        for(int i=0;i<n;i++)
        {
            umap[arr[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            int key=arr[i];
            auto temp=umap.find(key);
            if(temp->second == 1 )
            return key;
        }
        
    } 
  
};
**********************************************************************************************************************************************************************
2.)to reutrn the position which is smallest and which is repeated more than once in the array
 Solution {
  public:
    // Function to return the position of the first repeating element.
    int firstRepeated(int arr[], int n) {
        // code here
        unordered_map<int,int>umap;
        for(int i=0;i<n;i++)
        {
            umap[arr[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            int key=arr[i];
            auto temp=umap.find(key);
            if(temp->second != 1)
            {
                return i+1;
            }
            
        }
        return -1;
    }
};
*******************************************************************************************************************************************************************0
3.)to find the intersection of two arrays and return the number of repetitons of the element in the arrays
class Solution {
  public:
    // Function to return the count of the number of elements in
    // the intersection of two arrays.
    int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Your code goes 
        unordered_set<int>s;
        
        for(int i=0;i<n;i++)
        {
            s.insert(a[i]);
        }
        int count=0;
        for(int i=0;i<m;i++)
        {
             int key=b[i];
             if(s.find(key) != s.end())
             {
                 count++;
                 s.erase(key);
             }
        }
        return count++;
    }
};
*******************************************************************************************************************************************************************
4.)to find the key value pair to find the sum in the array given 
class Solution{
public:	
	// Function to check if array has 2 elements
	// whose sum is equal to the given value
	bool hasArrayTwoCandidates(int arr[], int n, int x) {
	    // code 
	    unordered_map<int,int>umap;
	    for(int i=0;i<n;i++)
	    {
	        umap[arr[i]]++;
	    }
	    for(auto itr=umap.begin();itr!=umap.end();itr++)
	    {
	        int key=itr->first;
	        int val=itr->second;
	        
	        int pair=x-key;
	        if(pair==key)
	        {
	            if(val>1)
	            return true;
	        }
	        else 
	        {
	            if(umap.find(pair) != umap.end())
	            {
	                return true;
	            }
	        }
	    }
	    return false;
	}
};
**********************************************************************************************************************************************************************
5.)to find the sub array whos sum is zero in the given array elements and are consequitive 
class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        //Your code here
        unordered_set<int>s;
        int pre=0;
        for(int i=0;i<n;i++)
        {
            pre+=arr[i];
            if(pre==0)
            return true;
            if(s.find(pre) != s.end())
            return true;
            
            s.insert(pre);
        }
        return false;
    }
};
********************************************************************************************************************************************************************
6.)to find the candidate with highest votes and return thier name and vote as vector , in case of tie return the name with lowest aplhabetical order
class Solution{
  public:
  
    //Function to return the name of candidate that received maximum votes.
    vector<string> winner(string arr[],int n)
    {
        // Your code here
        // Return the string containing the name and an integer
        // representing the number of votes the winning candidate got
        unordered_map<string,int>umap;
        for(int i=0;i<n;i++)
        {
            umap[arr[i]]++;
        }
        string name="";
        int max=0;
        for(auto itr=umap.begin();itr!=umap.end();itr++)
        {
            string key=itr->first;
            int val=itr->second;
            
            if(val>max)
            {
                name=key;
                max=val;
            }
            if(max==val)
            {
                if(key<name)
                {
                    name=key;
                }
            }
        }
        vector<string>ans;
        string vote=to_string(max);
        ans.push_back(name);
        ans.push_back(vote);
        return ans;
    }
};
*******************************************************************************************************************************************************************
7.)to find if the pair of negetive and positive number exists then return vector with neg number first and then pos number 
 Solution{
  public:
    vector<int> PosNegPair(int a[], int n) {
        vector<int>v,ans;
        map<int,int>mp;
        
        for(int i=0;i<n;i++)
        {
            if(a[i]<0)
            {
                v.push_back(a[i]);
            }
            else 
            {
                mp[a[i]]++;
            }
        }
        sort(v.begin(),v.end());
        
        for(int i=(int)v.size()-1;i>=0;i--)
        {
            int data=abs(v[i]);
            if(mp[data]>0)
            {
                ans.push_back(v[i]);
                ans.push_back(data);
                mp[data]-=1;
            }
        }
        return ans;
    }
};
*******************************************************************************************************************************************************************
8.)of arr1 is big ans arr2 is small print all the elements from arr1 and are present in arr2 , and print the remaining elements in sorted manner(mind repetition)
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        vector<int>ans;
        map<int,int>mp;

        for(auto x : arr1)
            mp[x]++;
        
        for(auto temp : arr2)
        {
            if(mp.find(temp) != mp.end())
            {
                auto x = mp.find(temp);
                int count = x->second;
                vector<int>v(count,temp);//(kitni bar yeh ,aur kya kitni bar hein)
                ans.insert(ans.end(),v.begin(),v.end());
                mp.erase(temp);

            }
        }
        for(auto x : mp )
        {
            int ele=x.first;
            int count=x.second;
            vector<int>v(count,ele);
            ans.insert(ans.end(),v.begin(),v.end());
        }
        return ans;
    }
};
*********************************************************************************************************************************************************************
9.)to find the anagrams and return the vector of anagrams if they are present
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>>ans;
        unordered_map<string,vector<string>>umap;

        for(auto x : strs)
        {
            string temp = x;
            sort(x.begin(),x.end());
            umap[x].push_back(temp);
        }
        for(auto x : umap)
        {
            ans.push_back(x.second);
        }
        return ans;
    }
};
*********************************************************************************************************************************************************************
10.)using of LAMBDA FUNCTION to solve the array and return array elements in ascending order of thier frequencies of repetitions 
class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) {
        unordered_map<int,int>umap;
        for(auto x : nums)
            umap[x]++;
        
        sort(nums.begin(),nums.end(),[&](int a ,int b)
        {return umap[a] != umap[b] ? umap[a]<umap[b] : a>b ;});
        
        return nums;
    }
};
*******************************************************************************************************************************************************************
11.)arrange the string s in te order as string (order) and rest of the elements in lexographical order
class Solution {
public:
    string customSortString(string order, string s) {
        map<int,int>mp;
        string ans="";

        for(auto x : s)
            mp[x]++;
        
        for(auto x : order)
        {
            if(mp.find(x) != mp.end())
            {
                auto temp = mp.find(x);
                int count = temp->second;
                string s(count,x);
                ans = ans+s;
                mp.erase(x);
                
            }
        }
        for(auto x : mp)
        {
            string s(x.second,x.first);
            ans = ans+s;
        }
        return ans;
    }
};
********************************************************************************************************************************************************************
12.)
