1).To add a data at the beginnign and the end of the linked list and return head:->
class Solution{
  public:
    //Function to insert a node at the beginning of the linked list.
    Node *insertAtBegining(Node *head, int x) {
       // Your code here
       Node * curr=new Node(x);
       curr->next=head;
       return curr;
       
    }
    
    
    //Function to insert a node at the end of the linked list.
    Node *insertAtEnd(Node *head, int x)  {
       // Your code here
       if(head==NULL)
       {
           Node * curr=new Node(x);
           return curr;
       }
       Node * curr=head;
       while(curr->next != NULL)
       {
           curr=curr->next;
       }
       curr->next=new Node(x);
       return head;
       
    }
};
**********************************************************************************************************************************************
2.)if the two linked lists are identical or not 
bool areIdentical(struct Node *head1, struct Node *head2)
{
    // Code here
    Node * temp1=head1;
    Node *temp2=head2;
    
    while(temp1!=NULL && temp2!=NULL)
    {
        if(temp1->data==temp2->data)
        {
            temp1=temp1->next;
            temp2=temp2->next;
        }
        else
        {
            return false;
        }
    }
    if(temp1==NULL && temp2==NULL) return true;
    else return false;
}
*********************************************************************************************************************************************
3.)to remove a node from linked list with no header node and given only node address
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode *temp;
        temp=node->next;
        node->val=temp->val;
        node->next=temp->next;

        
    }
};
********************************************************************************************************************************************
4.)remove duplicates from linked list:-
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
       ListNode *curr=head;;
       while(curr != NULL && curr->next != NULL )
       {
           if(curr->val == curr->next->val)
           {
               ListNode *temp=curr->next;;
               curr->next=curr->next->next;
               delete(temp);

           }
           else
           {
               curr=curr->next;
           }
       }
       return head;

    }
};
*********************************************************************************************************************************************
5.)Remove duplicates of unsorted lists
class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
     // your code goes here
     unordered_set<int>seen;
     Node * curr;
     curr=head;
     if(curr==NULL)
     return head;
     else
     seen.insert(curr->data);
     while(curr!=NULL && curr->next!=NULL)
     {
         if(seen.find(curr->next->data) != seen.end())
         {
             curr->next=curr->next->next;
         }
         else
         {
             seen.insert(curr->next->data);
             curr=curr->next;
         }
     }
     return head;
    }
};
*******************************************************************************************************************
6.)to remove an nth element from the last in linkedlist using two pointer technique
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * slow,*fast;
        slow=head;
        fast=head;

        while(n--)
        {
            fast=fast->next;
        }
        if(fast==NULL)
            return slow->next;

        while(fast->next != NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }

        slow->next=slow->next->next;
        return head;

    }
};
********************************************************************************************************************************************************************
7.)to swap the kth element from the beginnig and from the last in the linked list
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode * slow = head;
        ListNode * fast = head;

        while(--k)
        {
            fast=fast->next;
        }
        ListNode * first = fast;
        while(fast->next != NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }
        swap(first->val,slow->val);
        return head;
    }
};
*******************************************************************************************************************************************************************
8.)
